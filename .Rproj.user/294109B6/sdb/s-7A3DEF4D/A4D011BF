{
    "collab_server" : "",
    "contents" : "######################################################################\n# This scrapes all QB data from http://www.pro-football-reference.com/\n# Author: Kevin Soo\n######################################################################\n\n# load packages\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\n\n# get index of QBs\nqbindex <- read_html(\"http://www.pro-football-reference.com/players/qbindex.htm\")\nqbtable <- qbindex %>% html_table(fill = TRUE)\nqbtable <- data.frame(qbtable[1])\n\n# get QBs from after 2000 and filter out weird names\nqbtable <- qbtable %>% filter(From>=2000, To-From>=3) %>% filter(Player!=\"Brian St. Pierre\", Player!=\"\")\nqbs <- qbtable$Player\n\n# get links\nqblinks <- rep(NA, length(qbs))\nfor (n in 1:length(qbs)) {\n    name <- strsplit(qbs[n], \" \")\n    qblinks[n] <- paste(\"http://www.pro-football-reference.com/players/\", substr(name[[1]][2],1,1) , \"/\", substr(name[[1]][2],1,4), substr(name[[1]][1],1,2), \"\", \"00/gamelog/\", sep=\"\")\n}\n\n# scraping\nfor (q in 1:length(qbs)) {\n    # scrape tables\n    player <- read_html(qblinks[q])\n    stats <- player %>% html_table(fill = TRUE)\n    regularSeason <- data.frame(stats[1])\n    \n    # rename columns\n    colnames(regularSeason) <- regularSeason[1,]\n    \n    # eliminate filler rows\n    regularSeason$Rk <- as.numeric(regularSeason$Rk)\n    regularSeason <- regularSeason %>% na.omit()\n    \n    # select and name columns\n    regularSeason <- regularSeason[,2:21]\n    colnames(regularSeason) <- c(\"Year\", \"Date\", \"GameNum\", \"Age\", \"Team\", \"HomeAway\", \"Opponent\", \"Result\", \"Start\",\n                                 \"PassComplete\", \"PassAttempt\", \"PassAccuracy\", \"PassYards\", \"PassTD\", \"PassIntercepted\", \n                                 \"QBRating\", \"Sacked\", \"YardsLost\", \"YardsPerPassAttempt\", \"AdjustedYardsPerPassAttempt\")\n    \n    # parse poorly formatted columns\n    regularSeason$WinLoss <- NA\n    regularSeason$ScoreTeam <- NA\n    regularSeason$ScoreOpp <- NA\n    regularSeason$AgeYears <- NA\n    regularSeason$AgeDays <- NA\n    for (i in 1:nrow(regularSeason)) {\n        # parse win-loss columns\n        regularSeason$WinLoss[i] <- strsplit(regularSeason$Result[i], \" \")[[1]][1]\n        score <- strsplit(regularSeason$Result[i], \" \")[[1]][2]\n        regularSeason$ScoreTeam[i] <- strsplit(score, \"-\")[[1]][1]\n        regularSeason$ScoreOpp[i] <- strsplit(score, \"-\")[[1]][2]\n        \n        # parse age columns\n        regularSeason$AgeYears[i] <- strsplit(regularSeason$Age[i], \"-\")[[1]][1]\n        regularSeason$AgeDays[i] <- strsplit(regularSeason$Age[i], \"-\")[[1]][2]\n    }\n    \n    # recode columns\n    regularSeason$HomeAway <- ifelse(regularSeason$HomeAway==\"@\", \"A\", ifelse(regularSeason$HomeAway==\"\", \"H\", \"N\"))\n    regularSeason$Start <- ifelse(regularSeason$Start==\"\", 0, 1)\n    regularSeason$AgeDays <- as.numeric(regularSeason$AgeDays)\n    \n    # select columns\n    regularSeason <- regularSeason %>% select(Year:GameNum, \n                                              AgeYears, AgeDays, \n                                              Team:Opponent, \n                                              WinLoss:ScoreOpp, \n                                              Start:AdjustedYardsPerPassAttempt)\n    \n    # for players with playoff stats\n    if (length(player)==2) {\n        # get table\n        playoffs <- data.frame(stats[2])\n        \n        # rename columns\n        colnames(playoffs) <- playoffs[1,]\n        \n        # eliminate filler rows\n        playoffs$Rk <- as.numeric(playoffs$Rk)\n        playoffs <- playoffs %>% na.omit()\n        \n        # select and name columns\n        playoffs <- playoffs[,2:21]\n        colnames(playoffs) <- c(\"Year\", \"Date\", \"GameNum\", \"Age\", \"Team\", \"HomeAway\", \"Opponent\", \"Result\", \"Start\",\n                                \"PassComplete\", \"PassAttempt\", \"PassAccuracy\", \"PassYards\", \"PassTD\", \"PassIntercepted\", \n                                \"QBRating\", \"Sacked\", \"YardsLost\", \"YardsPerPassAttempt\", \"AdjustedYardsPerPassAttempt\")\n        \n        # parse poorly formatted columns\n        playoffs$WinLoss <- NA\n        playoffs$ScoreTeam <- NA\n        playoffs$ScoreOpp <- NA\n        playoffs$AgeYears <- NA\n        playoffs$AgeDays <- NA\n        for (i in 1:nrow(playoffs)) {\n            # parse win-loss columns\n            playoffs$WinLoss[i] <- strsplit(playoffs$Result[i], \" \")[[1]][1]\n            score <- strsplit(playoffs$Result[i], \" \")[[1]][2]\n            playoffs$ScoreTeam[i] <- strsplit(score, \"-\")[[1]][1]\n            playoffs$ScoreOpp[i] <- strsplit(score, \"-\")[[1]][2]\n            \n            # parse age columns\n            playoffs$AgeYears[i] <- strsplit(playoffs$Age[i], \"-\")[[1]][1]\n            playoffs$AgeDays[i] <- strsplit(playoffs$Age[i], \"-\")[[1]][2]\n        }\n        \n        # recode columns\n        playoffs$HomeAway <- ifelse(playoffs$HomeAway==\"@\", \"A\", ifelse(playoffs$HomeAway==\"\", \"H\", \"N\"))\n        playoffs$Start <- ifelse(playoffs$Start==\"\", 0, 1)\n        playoffs$AgeDays <- as.numeric(playoffs$AgeDays)\n        \n        # select columns\n        playoffs <- playoffs %>% select(Year:GameNum, \n                                        AgeYears, AgeDays, \n                                        Team:Opponent, \n                                        WinLoss:ScoreOpp, \n                                        Start:AdjustedYardsPerPassAttempt)\n        \n        # combine data frames\n        allStats <- rbind(regularSeason, playoffs) %>% arrange(Date)\n        Game <- 1:nrow(allStats)\n        Player <- rep(qbs[q], nrow(allStats))\n        allStats <- data.frame(Player, Game, allStats)\n    }\n    \n    # if no playoff stats\n    if (length(player)==1) {\n        allStats <- regularSeason %>% arrange(Date)\n        Game <- 1:nrow(allStats)\n        Player <- rep(qbs[q], nrow(allStats))\n        allStats <- data.frame(Player, Game, allStats)   \n    }\n    \n    # combine players\n    if (q==1) { QBStats <- allStats }\n    else { QBStats <- rbind(QBStats, allStats) }\n}\n\n# set data types\nQBStats$Player <- as.factor(QBStats$Player)\nQBStats$Game <- as.numeric(QBStats$Game)\nQBStats$Year <- as.numeric(QBStats$Year)\nQBStats$Date <- as.Date(QBStats$Date)\nQBStats$GameNum <- as.numeric(QBStats$GameNum)\nQBStats$AgeYears <- as.numeric(QBStats$AgeYears)\nQBStats$AgeDays <- as.numeric(QBStats$AgeDays)\nQBStats$Team <- as.factor(QBStats$Team)\nQBStats$HomeAway <- as.factor(QBStats$HomeAway)\nQBStats$Opponent <- as.factor(QBStats$Opponent)\nQBStats$WinLoss <- as.factor(QBStats$WinLoss)\nQBStats$ScoreTeam <- as.numeric(QBStats$ScoreTeam)\nQBStats$ScoreOpp <- as.numeric(QBStats$ScoreOpp)\nQBStats$Start <- as.factor(QBStats$Start)\nQBStats$PassComplete <- as.numeric(QBStats$PassComplete)\nQBStats$PassAttempt <- as.numeric(QBStats$PassAttempt)\nQBStats$PassAccuracy <- as.numeric(QBStats$PassAccuracy)\nQBStats$PassYards <- as.numeric(QBStats$PassYards)\nQBStats$PassTD <- as.numeric(QBStats$PassTD)\nQBStats$PassIntercepted <- as.numeric(QBStats$PassIntercepted)\nQBStats$QBRating <- as.numeric(QBStats$QBRating)\nQBStats$Sacked <- as.numeric(QBStats$Sacked)\nQBStats$YardsLost <- as.numeric(QBStats$YardsLost)\nQBStats$YardsPerPassAttempt <- as.numeric(QBStats$YardsPerPassAttempt)\nQBStats$AdjustedYardsPerPassAttempt <- as.numeric(QBStats$AdjustedYardsPerPassAttempt)\n\n# save data\nsave(QBStats, file=\"QBStats.Rda\")\n",
    "created" : 1477148029850.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "214023955",
    "id" : "A4D011BF",
    "lastKnownWriteTime" : 1477148059,
    "last_content_update" : 1477148059,
    "path" : "~/Box Sync/Personal/ameRicanFootball/scrape_QBs.R",
    "project_path" : "scrape_QBs.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}