if (j==10) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 10, 0),
1) } # problem 10
if (j==11) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, 10, 0),
9) } # problem 11
if (j==12) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, -10, 0),
-9) } # problem 12
if (j==13) { outcome[j] <- ifelse(choice==0, ifelse(chance<.05, 10, 0),
ifelse(chance<.5, 1, 0)) } # problem 13
}
if (i==1) { data <- data.frame(sub, problem, outcome) }
else { data <- rbind(data, data.frame(sub, problem, outcome)) }
}
# subjectTotals <- data %>% group_by(sub) %>% summarise(total = sum(outcome))
if (k==1) {
subTotals <- data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome)))
total <- sum(data$outcome) }
else {
subTotals <- rbind(subTotals, data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome))))
total <- data.frame(rbind(total, sum(data$outcome))) }
}
totals
total
sims <- 10
for (k in 1:sims) {
n <- 100 # n students
p <- 13 # n problems
for (i in 1:n) {
sub <- rep(i,p)
problem <- 1:p
outcome <- numeric(p)
for (j in 1:p) {
choice <- sample(c(0,1), 1)
chance <- runif(1, 0, 1)
if (j==1) { outcome[j] <- ifelse(choice==0, ifelse(chance<.8, 4, 0),
3) } # problem 1
if (j==2) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 4, 0),
ifelse(chance<.25, 3, 0)) } # problem 2
if (j==3) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.1, -32, 0)) } # problem 3
if (j==4) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.8, -4, 0)) } # problem 4
if (j==5) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 32, 0),
3) } # problem 5
if (j==6) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
ifelse(chance<.25, 3, 0)) } # problem 6
if (j==7) { outcome[j] <- ifelse(choice==0, ifelse(chance<.25, -3, 0),
ifelse(chance<.2, -4, 0)) } # problem 7
if (j==8) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 16, 0),
3) } # problem 8
if (j==9) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
3) } # problem 9
if (j==10) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 10, 0),
1) } # problem 10
if (j==11) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, 10, 0),
9) } # problem 11
if (j==12) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, -10, 0),
-9) } # problem 12
if (j==13) { outcome[j] <- ifelse(choice==0, ifelse(chance<.05, 10, 0),
ifelse(chance<.5, 1, 0)) } # problem 13
}
if (i==1) { data <- data.frame(sub, problem, outcome) }
else { data <- rbind(data, data.frame(sub, problem, outcome)) }
}
# subjectTotals <- data %>% group_by(sub) %>% summarise(total = sum(outcome))
if (k==1) {
subTotals <- data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome)))
total <- data.frame(sum(data$outcome)) }
else {
subTotals <- rbind(subTotals, data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome))))
total <- rbind(total, data.frame(sum(data$outcome))) }
}
totals
total
library(tidyverse)
sims <- 10
for (k in 1:sims) {
n <- 100 # n students
p <- 13 # n problems
for (i in 1:n) {
sub <- rep(i,p)
problem <- 1:p
outcome <- numeric(p)
for (j in 1:p) {
choice <- sample(c(0,1), 1)
chance <- runif(1, 0, 1)
if (j==1) { outcome[j] <- ifelse(choice==0, ifelse(chance<.8, 4, 0),
3) } # problem 1
if (j==2) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 4, 0),
ifelse(chance<.25, 3, 0)) } # problem 2
if (j==3) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.1, -32, 0)) } # problem 3
if (j==4) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.8, -4, 0)) } # problem 4
if (j==5) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 32, 0),
3) } # problem 5
if (j==6) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
ifelse(chance<.25, 3, 0)) } # problem 6
if (j==7) { outcome[j] <- ifelse(choice==0, ifelse(chance<.25, -3, 0),
ifelse(chance<.2, -4, 0)) } # problem 7
if (j==8) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 16, 0),
3) } # problem 8
if (j==9) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
3) } # problem 9
if (j==10) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 10, 0),
1) } # problem 10
if (j==11) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, 10, 0),
9) } # problem 11
if (j==12) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, -10, 0),
-9) } # problem 12
if (j==13) { outcome[j] <- ifelse(choice==0, ifelse(chance<.05, 10, 0),
ifelse(chance<.5, 1, 0)) } # problem 13
}
if (i==1) { data <- data.frame(sub, problem, outcome) }
else { data <- rbind(data, data.frame(sub, problem, outcome)) }
}
# subjectTotals <- data %>% group_by(sub) %>% summarise(total = sum(outcome))
if (k==1) {
subTotals <- data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome)))
total <- sum(data$outcome)
total <- data.frame(total)
}
else {
subTotals <- rbind(subTotals, data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome))))
total <- rbind(total, sum(data$outcome))
}
}
total
subTotals <- data.frame(data %>% group_by(sub) %>% summarise(total = sum(outcome)))
subTotals
sim <- 1
subTotals <- data.frame(sim, data %>% group_by(sub) %>% summarise(total = sum(outcome)))
head(subTotals)
subTotals <- rbind(subTotals, data.frame(k, data %>% group_by(sub) %>% summarise(total = sum(outcome))))
subTotals <- data.frame(k, data %>% group_by(sub) %>% summarise(total = sum(outcome)))
subTotals <- rbind(subTotals, data.frame(k, data %>% group_by(sub) %>% summarise(total = sum(outcome))))
head(subTotals)
ggplot(total, aes(x=total)) + geom_histogram(binwidth=5)
sims <- 500
for (k in 1:sims) {
n <- 100 # n students
p <- 13 # n problems
for (i in 1:n) {
sub <- rep(i,p)
problem <- 1:p
outcome <- numeric(p)
for (j in 1:p) {
choice <- sample(c(0,1), 1)
chance <- runif(1, 0, 1)
if (j==1) { outcome[j] <- ifelse(choice==0, ifelse(chance<.8, 4, 0),
3) } # problem 1
if (j==2) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 4, 0),
ifelse(chance<.25, 3, 0)) } # problem 2
if (j==3) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.1, -32, 0)) } # problem 3
if (j==4) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.8, -4, 0)) } # problem 4
if (j==5) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 32, 0),
3) } # problem 5
if (j==6) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
ifelse(chance<.25, 3, 0)) } # problem 6
if (j==7) { outcome[j] <- ifelse(choice==0, ifelse(chance<.25, -3, 0),
ifelse(chance<.2, -4, 0)) } # problem 7
if (j==8) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 16, 0),
3) } # problem 8
if (j==9) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
3) } # problem 9
if (j==10) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 10, 0),
1) } # problem 10
if (j==11) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, 10, 0),
9) } # problem 11
if (j==12) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, -10, 0),
-9) } # problem 12
if (j==13) { outcome[j] <- ifelse(choice==0, ifelse(chance<.05, 10, 0),
ifelse(chance<.5, 1, 0)) } # problem 13
}
if (i==1) { data <- data.frame(sub, problem, outcome) }
else { data <- rbind(data, data.frame(sub, problem, outcome)) }
}
# subjectTotals <- data %>% group_by(sub) %>% summarise(total = sum(outcome))
if (k==1) {
subTotals <- data.frame(k, data %>% group_by(sub) %>% summarise(total = sum(outcome)))
total <- sum(data$outcome)
total <- data.frame(total)
}
else {
subTotals <- rbind(subTotals, data.frame(k, data %>% group_by(sub) %>% summarise(total = sum(outcome))))
total <- rbind(total, sum(data$outcome))
}
}
ggplot(total, aes(x=total)) + geom_histogram(binwidth=5)
head(subTotals)
subTotals %>% group_by(k) %>% summarise(subjectMean=mean(total))
subTotals
ggplot(subTotals, aes(x=total)) + geom_histogram(binwidth=5)
ggplot(subTotals, aes(x=total)) + geom_histogram(binwidth=1)
n <- 1000 # n students
p <- 13 # n problems
for (i in 1:n) {
sub <- rep(i,p)
problem <- 1:p
outcome <- numeric(p)
for (j in 1:p) {
choice <- sample(c(0,1), 1)
chance <- runif(1, 0, 1)
if (j==1) { outcome[j] <- ifelse(choice==0, ifelse(chance<.8, 4, 0),
3) } # problem 1
if (j==2) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 4, 0),
ifelse(chance<.25, 3, 0)) } # problem 2
if (j==3) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.1, -32, 0)) } # problem 3
if (j==4) { outcome[j] <- ifelse(choice==0, -3,
ifelse(chance<.8, -4, 0)) } # problem 4
if (j==5) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 32, 0),
3) } # problem 5
if (j==6) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
ifelse(chance<.25, 3, 0)) } # problem 6
if (j==7) { outcome[j] <- ifelse(choice==0, ifelse(chance<.25, -3, 0),
ifelse(chance<.2, -4, 0)) } # problem 7
if (j==8) { outcome[j] <- ifelse(choice==0, ifelse(chance<.2, 16, 0),
3) } # problem 8
if (j==9) { outcome[j] <- ifelse(choice==0, ifelse(chance<.025, 32, 0),
3) } # problem 9
if (j==10) { outcome[j] <- ifelse(choice==0, ifelse(chance<.1, 10, 0),
1) } # problem 10
if (j==11) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, 10, 0),
9) } # problem 11
if (j==12) { outcome[j] <- ifelse(choice==0, ifelse(chance<.9, -10, 0),
-9) } # problem 12
if (j==13) { outcome[j] <- ifelse(choice==0, ifelse(chance<.05, 10, 0),
ifelse(chance<.5, 1, 0)) } # problem 13
}
if (i==1) { data <- data.frame(sub, problem, outcome) }
else { data <- rbind(data, data.frame(sub, problem, outcome)) }
}
ggplot(data, aes(x=total)) + geom_histogram(binwidth=1)
head(data)
summary(data)
ggplot(data, aes(x=outcome)) + geom_histogram(binwidth=1)
ggplot(data, aes(x=outcome)) + geom_histogram(binwidth=1)
data
df <- data %>% group_by(sub)
ggplot(df, aes(x=outcome)) + geom_histogram(binwidth=1)
df
df <- data %>% group_by(sub) %>% summarise(total = sum(outcome))
ggplot(df, aes(x=total)) + geom_histogram(binwidth=1)
summary(df)
df$total
sort(df$total)
160/1000
summary(df)
head(df)
sample(df$total, 100)
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
sum(sample(df$total, 100))
summary(df)
summary(filter(df, total>0))
name <- "Tom Brady"
name <- "Tom Brady"
link <- strsplit(name, " ")
link
substr(link, 1, 2)
link <- strsplit(name, " ")
link
substr(link[[1]][1], 1, 2)
qbs <- c("Tom Brady", "Aaron Rodgers")
qblinks <- rep(NA, length(qbs))
for (n in 1:length(qbs)) {
name <- strsplit(qbs[n], " ")
qblinks[n] <- paste("http://www.pro-football-reference.com/players/", substr(name[[1]][2],1,1) , "/", substr(name[[1]][1],1,2), substr(name[[1]][2],1,4),"", "00/gamelog/", sep="")
}
qblinks
qbs <- c("Tom Brady", "Aaron Rodgers")
# get links
qblinks <- rep(NA, length(qbs))
for (n in 1:length(qbs)) {
name <- strsplit(qbs[n], " ")
qblinks[n] <- paste("http://www.pro-football-reference.com/players/", substr(name[[1]][2],1,1) , "/", substr(name[[1]][2],1,4), substr(name[[1]][1],1,2), "", "00/gamelog/", sep="")
}
qblinks
qbindex <- read_html("http://www.pro-football-reference.com/players/qbindex.htm")
library(tidyverse)
library(rvest)
library(stringr)
qbindex <- read_html("http://www.pro-football-reference.com/players/qbindex.htm")
qbtable <- qbindex %>% html_table(fill = TRUE)
qbtable <- data.frame(qbtable[1])
qbtable
head(qbtable)
qbtable <- qbtable %>% filter(From>=2000)
View(qbtable)
qbtable$Player
name <- "A.J. Feeley"
paste("http://www.pro-football-reference.com/players/", substr(name[[1]][2],1,1) , "/", substr(name[[1]][2],1,4), substr(name[[1]][1],1,2), "", "00/gamelog/", sep="")
name <- strsplit(name, " ")
name
paste("http://www.pro-football-reference.com/players/", substr(name[[1]][2],1,1) , "/", substr(name[[1]][2],1,4), substr(name[[1]][1],1,2), "", "00/gamelog/", sep="")
qbtable <- qbtable %>% filter(From>=2000, To-From>=3)
qbtable$Player
library(tidyverse)
library(rvest)
library(stringr)
# get index of QBs
qbindex <- read_html("http://www.pro-football-reference.com/players/qbindex.htm")
qbtable <- qbindex %>% html_table(fill = TRUE)
qbtable <- data.frame(qbtable[1])
qbtable <- qbtable %>% filter(From>=2000, To-From>=3) %>% filter(Player!="Brian St. Pierre", Player!="")
qbs <- qbtable$Player
qblinks <- rep(NA, length(qbs))
for (n in 1:length(qbs)) {
name <- strsplit(qbs[n], " ")
qblinks[n] <- paste("http://www.pro-football-reference.com/players/", substr(name[[1]][2],1,1) , "/", substr(name[[1]][2],1,4), substr(name[[1]][1],1,2), "", "00/gamelog/", sep="")
}
qblinks
for (q in 1:length(qbs)) {
# scrape tables
player <- read_html(qblinks[q])
stats <- player %>% html_table(fill = TRUE)
regularSeason <- data.frame(stats[1])
# rename columns
colnames(regularSeason) <- regularSeason[1,]
# eliminate filler rows
regularSeason$Rk <- as.numeric(regularSeason$Rk)
regularSeason <- regularSeason %>% na.omit()
# select and name columns
regularSeason <- regularSeason[,2:21]
colnames(regularSeason) <- c("Year", "Date", "GameNum", "Age", "Team", "HomeAway", "Opponent", "Result", "Start",
"PassComplete", "PassAttempt", "PassAccuracy", "PassYards", "PassTD", "PassIntercepted",
"QBRating", "Sacked", "YardsLost", "YardsPerPassAttempt", "AdjustedYardsPerPassAttempt")
# parse poorly formatted columns
regularSeason$WinLoss <- NA
regularSeason$ScoreTeam <- NA
regularSeason$ScoreOpp <- NA
regularSeason$AgeYears <- NA
regularSeason$AgeDays <- NA
for (i in 1:nrow(regularSeason)) {
# parse win-loss columns
regularSeason$WinLoss[i] <- strsplit(regularSeason$Result[i], " ")[[1]][1]
score <- strsplit(regularSeason$Result[i], " ")[[1]][2]
regularSeason$ScoreTeam[i] <- strsplit(score, "-")[[1]][1]
regularSeason$ScoreOpp[i] <- strsplit(score, "-")[[1]][2]
# parse age columns
regularSeason$AgeYears[i] <- strsplit(regularSeason$Age[i], "-")[[1]][1]
regularSeason$AgeDays[i] <- strsplit(regularSeason$Age[i], "-")[[1]][2]
}
# recode columns
regularSeason$HomeAway <- ifelse(regularSeason$HomeAway=="@", "A", ifelse(regularSeason$HomeAway=="", "H", "N"))
regularSeason$Start <- ifelse(regularSeason$Start=="", 0, 1)
regularSeason$AgeDays <- as.numeric(regularSeason$AgeDays)
# select columns
regularSeason <- regularSeason %>% select(Year:GameNum,
AgeYears, AgeDays,
Team:Opponent,
WinLoss:ScoreOpp,
Start:AdjustedYardsPerPassAttempt)
# for players with playoff stats
if (length(player)==2) {
# get table
playoffs <- data.frame(stats[2])
# rename columns
colnames(playoffs) <- playoffs[1,]
# eliminate filler rows
playoffs$Rk <- as.numeric(playoffs$Rk)
playoffs <- playoffs %>% na.omit()
# select and name columns
playoffs <- playoffs[,2:21]
colnames(playoffs) <- c("Year", "Date", "GameNum", "Age", "Team", "HomeAway", "Opponent", "Result", "Start",
"PassComplete", "PassAttempt", "PassAccuracy", "PassYards", "PassTD", "PassIntercepted",
"QBRating", "Sacked", "YardsLost", "YardsPerPassAttempt", "AdjustedYardsPerPassAttempt")
# parse poorly formatted columns
playoffs$WinLoss <- NA
playoffs$ScoreTeam <- NA
playoffs$ScoreOpp <- NA
playoffs$AgeYears <- NA
playoffs$AgeDays <- NA
for (i in 1:nrow(playoffs)) {
# parse win-loss columns
playoffs$WinLoss[i] <- strsplit(playoffs$Result[i], " ")[[1]][1]
score <- strsplit(playoffs$Result[i], " ")[[1]][2]
playoffs$ScoreTeam[i] <- strsplit(score, "-")[[1]][1]
playoffs$ScoreOpp[i] <- strsplit(score, "-")[[1]][2]
# parse age columns
playoffs$AgeYears[i] <- strsplit(playoffs$Age[i], "-")[[1]][1]
playoffs$AgeDays[i] <- strsplit(playoffs$Age[i], "-")[[1]][2]
}
# recode columns
playoffs$HomeAway <- ifelse(playoffs$HomeAway=="@", "A", ifelse(playoffs$HomeAway=="", "H", "N"))
playoffs$Start <- ifelse(playoffs$Start=="", 0, 1)
playoffs$AgeDays <- as.numeric(playoffs$AgeDays)
# select columns
playoffs <- playoffs %>% select(Year:GameNum,
AgeYears, AgeDays,
Team:Opponent,
WinLoss:ScoreOpp,
Start:AdjustedYardsPerPassAttempt)
# combine data frames
allStats <- rbind(regularSeason, playoffs) %>% arrange(Date)
Game <- 1:nrow(allStats)
Player <- rep(qbs[q], nrow(allStats))
allStats <- data.frame(Player, Game, allStats)
}
# if no playoff stats
if (length(player)==1) {
allStats <- regularSeason %>% arrange(Date)
Game <- 1:nrow(allStats)
Player <- rep(qbs[q], nrow(allStats))
allStats <- data.frame(Player, Game, allStats)
}
# combine players
if (q==1) { QBStats <- allStats }
else { QBStats <- rbind(QBStats, allStats) }
}
# set data types
QBStats$Player <- as.factor(QBStats$Player)
QBStats$Game <- as.numeric(QBStats$Game)
QBStats$Year <- as.numeric(QBStats$Year)
QBStats$Date <- as.Date(QBStats$Date)
QBStats$GameNum <- as.numeric(QBStats$GameNum)
QBStats$AgeYears <- as.numeric(QBStats$AgeYears)
QBStats$AgeDays <- as.numeric(QBStats$AgeDays)
QBStats$Team <- as.factor(QBStats$Team)
QBStats$HomeAway <- as.factor(QBStats$HomeAway)
QBStats$Opponent <- as.factor(QBStats$Opponent)
QBStats$WinLoss <- as.factor(QBStats$WinLoss)
QBStats$ScoreTeam <- as.numeric(QBStats$ScoreTeam)
QBStats$ScoreOpp <- as.numeric(QBStats$ScoreOpp)
QBStats$Start <- as.factor(QBStats$Start)
QBStats$PassComplete <- as.numeric(QBStats$PassComplete)
QBStats$PassAttempt <- as.numeric(QBStats$PassAttempt)
QBStats$PassAccuracy <- as.numeric(QBStats$PassAccuracy)
QBStats$PassYards <- as.numeric(QBStats$PassYards)
QBStats$PassTD <- as.numeric(QBStats$PassTD)
QBStats$PassIntercepted <- as.numeric(QBStats$PassIntercepted)
QBStats$QBRating <- as.numeric(QBStats$QBRating)
QBStats$Sacked <- as.numeric(QBStats$Sacked)
QBStats$YardsLost <- as.numeric(QBStats$YardsLost)
QBStats
View(QBStats)
QBStats$YardsPerPassAttempt <- as.numeric(QBStats$YardsPerPassAttempt)
QBStats$AdjustedYardsPerPassAttempt <- as.numeric(QBStats$AdjustedYardsPerPassAttempt)
save(QBStats, file="QBStats.Rda")
